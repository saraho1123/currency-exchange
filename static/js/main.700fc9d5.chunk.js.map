{"version":3,"sources":["sampleApiData.js","Form/Form.js","CurrencyCard/CurrencyCard.js","ExchangeContainer/ExchangeContainer.js","Bookmarked/Bookmarked.js","BookmarkedContainer/BookmarkedContainer.js","apiCalls.js","App/App.js","index.js"],"names":["currencyCodes","Form","props","useState","userCurrency","setUserCurrency","userAmount","setUserAmount","newCurrency","setNewCurrency","getUserData","a","newExchange","id","Date","now","addCurrencyCard","clearInputs","className","to","data-testid","aria-label","htmlFor","name","type","value","onChange","event","target","map","code","min","max","placeholder","onClick","CurrencyCard","newAmount","exchangeRate","date","addBookmarked","bookmarkedTag","deleteCurrencyCard","ExchangeContainer","fusedData","length","currencyCards","data","currencyData","Bookmarked","removeBookmarked","undefined","BookmarkedContainer","bookmarkedConversions","getExchangeRates","fetch","response","json","App","setCurrencyData","useEffectSwitch","setUseEffectSwitch","setBookmarkedTag","setFusedData","setBookmarkedConversions","newCurrencyCardInfo","filteredCurrencyCards","filter","card","bookmarkedCards","find","filteredCards","useEffect","then","consolidateData","rates","catch","error","console","log","exRate","calculatedAmount","Math","round","calculateNewAmount","newFusedData","path","render","exact","href","router","basename","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.700fc9d5.chunk.js","sourcesContent":["export const sampleApiData = {\n  \"rates\": {\n      \"CAD\": 1.2686407126,\n      \"HKD\": 7.7536291653,\n      \"ISK\": 129.1652919828,\n      \"PHP\": 48.0303530188,\n      \"DKK\": 6.1360112174,\n      \"HUF\": 296.5770372814,\n      \"CZK\": 21.6017815902,\n      \"GBP\": 0.7336110195,\n      \"RON\": 4.0199604091,\n      \"SEK\": 8.3354503464,\n      \"IDR\": 14043.9953810624,\n      \"INR\": 73.1297426592,\n      \"BRL\": 5.269548004,\n      \"RUB\": 73.4823490597,\n      \"HRK\": 6.2429891125,\n      \"JPY\": 104.0993071594,\n      \"THB\": 30.019795447,\n      \"CHF\": 0.8912075223,\n      \"EUR\": 0.8248102936,\n      \"MYR\": 4.0359617288,\n      \"BGN\": 1.6131639723,\n      \"TRY\": 7.3813922798,\n      \"CNY\": 6.4672550313,\n      \"NOK\": 8.5044539756,\n      \"NZD\": 1.3900527879,\n      \"ZAR\": 15.1886341142,\n      \"USD\": 1.0,\n      \"MXN\": 19.8299241175,\n      \"SGD\": 1.3271197625,\n      \"AUD\": 1.2901682613,\n      \"ILS\": 3.1421148136,\n      \"KRW\": 1097.3028703398,\n      \"PLN\": 3.7429066315\n  },\n  \"base\": \"USD\",\n  \"date\": \"2021-01-14\"\n}\n\nexport const currencyCodes = [\n  \"Select Currency Code\",\n  \"AUD\", \n  \"BGN\", \n  \"BRL\", \n  \"CAD\", \n  \"CHF\", \n  \"CNY\", \n  \"CZK\", \n  \"DKK\", \n  \"EUR\", \n  \"GBP\", \n  \"HKD\", \n  \"HRK\", \n  \"HUF\", \n  \"IDR\", \n  \"ILS\", \n  \"INR\", \n  \"ISK\", \n  \"JPY\", \n  \"KRW\", \n  \"MXN\", \n  \"MYR\", \n  \"NOK\", \n  \"NZD\", \n  \"PHP\", \n  \"PLN\", \n  \"RON\", \n  \"RUB\", \n  \"SEK\", \n  \"SGD\", \n  \"THB\", \n  \"TRY\", \n  \"USD\", \n  \"ZAR\"\n]\n\nexport const sampleCurrencyCard = {\n  id: 1234,\n  newAmount: 7.34,\n  userCurrency: \"USD\",\n  userAmount: 10,\n  newCurrency: \"GBP\",\n  exchangeRate: 0.7336110195,\n  date: '2021-01-14',\n  bookmarkedTag: false,\n}\n\nexport const multipleSampleCurrencyCards = [\n  {\n    currencyData: \n      {\n        id: 1234,\n        newCurrency: \"PHP\",\n        userAmount: 10,\n        userCurrency: \"USD\",\n      },\n    date: '2021-01-14',\n    exchangeRate: 48.0303530188,\n    newAmount: 480.29,\n    bookmarkedTag: false,\n  },\n  {\n    currencyData: \n      {\n        id: 12345,\n        newCurrency: \"GBP\",\n        userAmount: 10,\n        userCurrency: \"USD\",\n      },\n    date: '2021-01-14',\n    exchangeRate: 0.7336110195,\n    newAmount: 7.34,\n    bookmarkedTag: false,\n  },\n  {\n    currencyData: \n      {\n        id: 123456,\n        newCurrency: \"NZD\",\n        userAmount: 10,\n        userCurrency: \"USD\",\n      },\n    date: '2021-01-14',\n    exchangeRate: 1.3900527879,\n    newAmount: 13.94,\n    bookmarkedTag: false,\n  },\n]\n\nexport const sampleBookmarkedCard = {\n  id: 1234,\n  newAmount: 7.34,\n  userCurrency: \"USD\",\n  userAmount: 10,\n  newCurrency: \"GBP\",\n  exchangeRate: 0.7336110195,\n  date: '2021-01-14',\n}\n\nexport const multipleSampleBookmarkedCards = [\n  {\n    currencyData: \n      {\n        id: 1234,\n        newCurrency: \"PHP\",\n        userAmount: 10,\n        userCurrency: \"USD\",\n      },\n    date: '2021-01-14',\n    exchangeRate: 48.0303530188,\n    newAmount: 480.29,\n  },\n  {\n    currencyData: \n      {\n        id: 12345,\n        newCurrency: \"GBP\",\n        userAmount: 10,\n        userCurrency: \"USD\",\n      },\n    date: '2021-01-14',\n    exchangeRate: 0.7336110195,\n    newAmount: 7.34,\n  },\n  {\n    currencyData: \n      {\n        id: 123456,\n        newCurrency: \"NZD\",\n        userAmount: 10,\n        userCurrency: \"USD\",\n      },\n    date: '2021-01-14',\n    exchangeRate: 1.3900527879,\n    newAmount: 13.94,\n  },\n]\n","import React, { useState } from 'react'\nimport { PropTypes } from 'prop-types'\nimport { NavLink } from 'react-router-dom'\nimport { currencyCodes } from '../sampleApiData.js'\nimport './Form.scss'\n\nconst Form = (props) => {\n  const [userCurrency, setUserCurrency] = useState('')\n  const [userAmount, setUserAmount] = useState('')\n  const [newCurrency, setNewCurrency] = useState('')\n\n  const getUserData = async () => {\n    const newExchange = {\n      id: Date.now(),\n      userCurrency,\n      userAmount,\n      newCurrency,\n    }\n    await props.addCurrencyCard(newExchange)\n    clearInputs()\n  }\n\n  const clearInputs = () => {\n    setUserCurrency('')\n    setUserAmount('')\n    setNewCurrency('')\n  }\n\n  if (userCurrency && userAmount && newCurrency) {\n    return (\n      <section className='form-container'>\n        <div className=\"link-to-cards\">        \n          <NavLink to='/currency-cards' className='nav'>See All Your Conversions</NavLink>\n          </div>\n        <form className='user-input' data-testid='form' aria-label=\"currency-input\">\n          <label htmlFor='currency-input'></label>\n          <div className='forms'>\n            <select\n              className='user-currency input'\n              aria-label=\"user-currency-input\"\n              name=\"currency-input\"\n              data-testid='user-currency-dropdown'\n              type='text'\n              value={userCurrency}\n              onChange={(event) => setUserCurrency(event.target.value)}>\n              {currencyCodes.map(code => {\n                return (\n                  <option key={code} value={code} data-testid={code}>{code}</option>\n                )\n              })}\n            </select>\n            <input\n              className='user-amount input'\n              aria-label=\"user-amount-input\"\n              name=\"currency-input\"\n              type='number'\n              min='1'\n              max='10000'\n              placeholder='Amount to exchange (up to 10,000)'\n              value={userAmount}\n              onChange={(event) => setUserAmount(event.target.value)}\n            />\n            <select\n              className='new-currency input'\n              aria-label=\"new-currency-input\"\n              name=\"currency-input\"\n              data-testid='new-currency-dropdown'\n              type='text'\n              value={newCurrency}\n              onChange={(event) => setNewCurrency(event.target.value)}>\n              {currencyCodes.map(code => {\n                return (\n                  <option key={code} value={code}>{code}</option>\n                )\n              })}\n          </select>\n          </div>\n          <NavLink onClick={getUserData} to=\"/currency-cards\" className=\"nav\">Get Currency Conversion </NavLink>\n        </form>\n      </section>\n    )\n  } else {\n    return (\n      <section className='form-container'>\n        <div className=\"link-to-cards\">\n        <NavLink to='/currency-cards' className='nav'>See All Your Conversions</NavLink>\n        </div>\n        <form className='user-input' data-testid='form' aria-label='currency-input'>\n          <label htmlFor='currency-input'></label>\n        <div className='forms'>\n          <select\n            className='user-currency input'\n            aria-label=\"user-currency-input\"\n            name=\"currency-input\"\n            data-testid='user-currency-dropdown'\n            type='text'\n            value={userCurrency}\n            onChange={(event) => setUserCurrency(event.target.value)}>\n            {currencyCodes.map(code => {\n              return (\n                <option key={code} value={code} data-testid={code}>{code}</option>\n              )\n            })}\n          </select>\n          <input\n            className='user-amount input'\n            aria-label=\"user-amount-input\"\n            name=\"currency-input\"\n            type='number'\n            min='1'\n            max='10000'\n            placeholder='Amount to exchange (up to 10,000)'\n            value={userAmount}\n            onChange={(event) => setUserAmount(event.target.value)}\n          />\n          <select\n            className='new-currency input'\n            aria-label=\"new-currency-input\"\n            name=\"currency-input\"\n            data-testid='new-currency-dropdown'\n            type='text'\n            value={newCurrency}\n            onChange={(event) => setNewCurrency(event.target.value)}>\n            {currencyCodes.map(code => {\n              return (\n                <option key={code} value={code}>{code}</option>\n              )\n            })}\n          </select>\n          </div>\n          <h1>Please complete all fields</h1>\n        </form>\n      </section>\n    )\n  }\n}\n\nexport default Form\n\nForm.propTypes = {\n  addCurrencyCard: PropTypes.func,\n}\n","import React from 'react'\nimport { PropTypes } from 'prop-types'\nimport './CurrencyCard.scss';\n\nconst CurrencyCard = ({\n  id,\n  newAmount,\n  userCurrency,\n  userAmount,\n  newCurrency,\n  exchangeRate,\n  date,\n  addBookmarked,\n  bookmarkedTag,\n  deleteCurrencyCard,\n}) => {\n  return (\n    <section className='currency-card'>\n      <button onClick={() => deleteCurrencyCard(id)}>🗑</button>\n      <p>On {date}, </p>\n      <p>{userAmount} {userCurrency} is worth: </p>\n      <h1 className='new-conversion'>{newAmount} {newCurrency}</h1>\n      <p>at an exchange rate of: <b>{exchangeRate}</b></p>\n      {!bookmarkedTag &&\n        <button\n          onClick={() => addBookmarked(id)} >\n          Bookmark this Conversion\n          </button>}\n    </section>\n  )\n}\n\nexport default CurrencyCard\n\nCurrencyCard.propTypes = {\n  id: PropTypes.number.isRequired,\n  newAmount: PropTypes.number.isRequired,\n  userCurrency: PropTypes.string.isRequired,\n  userAmount: PropTypes.number.isRequired,\n  newCurrency: PropTypes.string.isRequired,\n  exchangeRate: PropTypes.number.isRequired,\n  date: PropTypes.string.isRequired,\n  addBookmarked: PropTypes.func.isRequired,\n  bookmarkedTag: PropTypes.bool,\n  deleteCurrencyCard: PropTypes.func.isRequired,\n}\n","import React from 'react'\nimport { PropTypes } from 'prop-types'\nimport { NavLink } from 'react-router-dom'\nimport './ExchangeContainer.scss'\nimport CurrencyCard from '../CurrencyCard/CurrencyCard.js'\n \nconst ExchangeContainer = ({ fusedData, addBookmarked, deleteCurrencyCard, bookmarkedTag }) => {\n  if (fusedData.length < 1) {\n    return (\n      <section className='container'>\n        <NavLink to=\"/\" className=\"nav\">Get a new Currency Exchange!</NavLink>\n        <h1>You have not completed any conversions yet.</h1>\n      </section>\n    )\n  } else {\n    const currencyCards = fusedData.map(data => {\n      return (\n        <CurrencyCard \n          id={data.currencyData.id}\n          key={data.currencyData.id}\n          newAmount={data.newAmount}\n          userCurrency={data.currencyData.userCurrency}\n          userAmount={data.currencyData.userAmount}\n          newCurrency={data.currencyData.newCurrency}\n          exchangeRate={data.exchangeRate}\n          date={data.date}\n          addBookmarked={addBookmarked}\n          bookmarkedTag={bookmarkedTag}\n          deleteCurrencyCard={deleteCurrencyCard}\n        />\n        )\n      })\n    return (\n      fusedData &&\n      <section className='container'>\n        <div className='links'>\n          <NavLink to=\"/\" className=\"nav get-new\">Get a new Currency Exchange!</NavLink>\n          <NavLink to=\"/bookmarked-conversions\" className=\"nav see-bookmarked\">See Your Bookmarked Conversions</NavLink>\n        </div>\n        <h1 >Your Currency Conversions</h1>\n        <div className='cards-container'>\n          { currencyCards }\n        </div>\n      </section>\n    )\n   }\n  }\n\nexport default ExchangeContainer\n\nExchangeContainer.propTypes = {\n  fusedData: PropTypes.array, \n  addBookmarked: PropTypes.func, \n  deleteCurrencyCard: PropTypes.func, \n  bookmarkedTag: PropTypes.bool,\n}\n","import React from 'react'\nimport { PropTypes } from 'prop-types'\nimport './Bookmarked.scss';\n\nconst Bookmarked = ({ \n  id, \n  newAmount, \n  userCurrency, \n  userAmount, \n  newCurrency, \n  exchangeRate, \n  date,\n  deleteCurrencyCard,\n  removeBookmarked }) => {\n  if(id !== undefined) {\n    return (\n      <section className='bookmarked'>\n        <button onClick={() => deleteCurrencyCard(id)}>🗑</button>\n        <p>On {date}, </p>\n        <p>{userAmount} {userCurrency} is worth: </p>\n        <h1 className='new-conversion'>{newAmount} {newCurrency}</h1>        \n        <h1>at an exchange rate of: </h1>            \n        <h1>{exchangeRate}</h1> \n        <button onClick={()=> removeBookmarked(id)}>Remove From Bookmarked Conversions</button>\n      </section>\n    )\n  }\n}\n\nexport default Bookmarked;\n\nBookmarked.propTypes = {\n  id: PropTypes.number.isRequired,\n  newAmount: PropTypes.number.isRequired,\n  userCurrency: PropTypes.string.isRequired, \n  userAmount: PropTypes.number.isRequired, \n  newCurrency: PropTypes.string.isRequired, \n  exchangeRate: PropTypes.number.isRequired, \n  deleteCurrencyCard: PropTypes.func.isRequired,\n  removeBookmarked: PropTypes.func.isRequired,\n};\n","import React from 'react'\nimport { PropTypes } from 'prop-types'\nimport { NavLink } from 'react-router-dom'\nimport './BookmarkedContainer.scss';\nimport Bookmarked from '../Bookmarked/Bookmarked.js'\n\nconst BookmarkedContainer = ({ bookmarkedConversions, removeBookmarked, deleteCurrencyCard }) => {\n  if (bookmarkedConversions.length < 1) {\n    return (\n      <section className='bookmarked-container'>\n        <NavLink to=\"/\" className=\"nav\">Get a new Currency Exchange!</NavLink>\n        <NavLink to='/currency-cards' className='nav'>See All Your Conversions</NavLink>\n        <h1>You have not yet bookmarked any conversions.</h1>\n      </section>\n    )\n  } else if (bookmarkedConversions.length > 0) {\n    const currencyCards = bookmarkedConversions.map(data => {\n      return (\n        <Bookmarked\n          id={data.currencyData.id}\n          key={data.currencyData.id}\n          newAmount={data.newAmount}\n          userCurrency={data.currencyData.userCurrency}\n          userAmount={data.currencyData.userAmount}\n          newCurrency={data.currencyData.newCurrency}\n          exchangeRate={data.exchangeRate}\n          date={data.date}\n          removeBookmarked={removeBookmarked}\n          deleteCurrencyCard={deleteCurrencyCard}\n        />\n        )\n      })\n      return (\n        <section className='bookmarked-container'>\n          <NavLink to=\"/\" className=\"nav\">Get a new Currency Exchange!</NavLink>\n          <NavLink to='/currency-cards' className='nav'>See All Your Conversions</NavLink>\n          <h1 >Your Bookmarked Conversions</h1>\n          <div className='cards-container'>\n            { currencyCards }\n          </div>\n        </section>\n      )\n  }\n}\n\nexport default BookmarkedContainer;\n\nBookmarkedContainer.propTypes = {\n  bookmarkedConversions: PropTypes.array, \n  removeBookmarked: PropTypes.func.isRequired, \n  deleteCurrencyCard: PropTypes.func.isRequired,\n}","export const getExchangeRates = async (userCurrency) => {\n  const response = await fetch(`https://api.exchangeratesapi.io/latest?base=${userCurrency}`)\n  const data = await response.json()\n  return data\n}\n","import React, { useState, useEffect } from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport './App.scss';\nimport Form from '../Form/Form.js'\nimport ExchangeContainer from '../ExchangeContainer/ExchangeContainer.js'\nimport BookmarkedContainer from '../BookmarkedContainer/BookmarkedContainer.js'\n\nimport { getExchangeRates } from '../apiCalls.js'\n\nconst App = () => {\n  const [currencyData, setCurrencyData] = useState({})\n  const [useEffectSwitch, setUseEffectSwitch] = useState(false)\n  const [bookmarkedTag, setBookmarkedTag] = useState(false)\n  const [fusedData, setFusedData] = useState([])\n  const [bookmarkedConversions, setBookmarkedConversions] = useState([])\n\n  const addCurrencyCard = (newCurrencyCardInfo) => {\n    setCurrencyData(newCurrencyCardInfo)\n    setUseEffectSwitch(true)\n  }\n\n  const deleteCurrencyCard = (id) => {\n    const filteredCurrencyCards = fusedData.filter(card => {\n      return card.currencyData.id !== id\n    })\n    setFusedData(filteredCurrencyCards)\n    setBookmarkedConversions(filteredCurrencyCards)\n  }\n\n  const addBookmarked = (id) => {\n    const bookmarkedCards = fusedData.find(card => {\n      return card.currencyData.id === id\n    })\n    setBookmarkedConversions([...bookmarkedConversions, bookmarkedCards])\n    setBookmarkedTag(true)\n  }\n\n  const removeBookmarked = (id) => {\n    const filteredCards = fusedData.filter(card => {\n      return card.currencyData.id !== id\n    })\n    setBookmarkedConversions(filteredCards)\n    setBookmarkedTag(false)\n  }\n\n  useEffect(() => {\n    if (useEffectSwitch) {\n      getExchangeRates(currencyData.userCurrency)\n        .then(data => {\n          consolidateData(data.rates[currencyData.newCurrency], data.date)\n        })\n        .catch(error => console.log(error))\n      setUseEffectSwitch(false)\n    }\n\n  }, [currencyData])\n\n  const calculateNewAmount = (exRate) => {\n    const newAmount = Math.round(1000 * exRate) / 1000 * currencyData.userAmount\n    return newAmount\n  }\n\n  const consolidateData = (exRate, date) => {\n    const calculatedAmount = calculateNewAmount(exRate)\n    const newFusedData = {\n      currencyData,\n      newAmount: calculatedAmount,\n      exchangeRate: exRate,\n      date: date,\n    }\n    setFusedData([...fusedData, newFusedData])\n  }\n\n  return (\n    <main>\n      <section>\n        <h1>Currency Exchange</h1>\n        <Switch>\n          <Route\n            path='/currency-cards'\n            render={() => {\n              return (\n                fusedData &&\n                <ExchangeContainer\n                  fusedData={fusedData}\n                  addBookmarked={addBookmarked}\n                  deleteCurrencyCard={deleteCurrencyCard}\n                  bookmarkedTag={bookmarkedTag}\n                />\n              )\n            }}\n          />\n          <Route\n            \n            path='/bookmarked-conversions'\n            render={() => {\n              return (\n                fusedData &&\n                <BookmarkedContainer\n                  bookmarkedConversions={bookmarkedConversions}\n                  deleteCurrencyCard={deleteCurrencyCard}\n                  removeBookmarked={removeBookmarked}\n                />\n              )\n            }}\n          />\n          <Route\n            exact\n            path='/'\n            render={() => {\n              return (\n                <Form\n                  addCurrencyCard={addCurrencyCard}\n                />\n              )\n            }}\n          />\n        </Switch>\n      </section>\n      <footer><p>Curreny Rates for the day take from: </p>  <a href='https://github.com/exchangeratesapi/exchangeratesapi'>Exchange Rates API</a></footer>\n    </main>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App.js';\nimport { BrowserRouter } from 'react-router-dom'\n\n\nconst router = <BrowserRouter basename='/currency-exchange'>\n  <App />\n</BrowserRouter>\n\nReactDOM.render(router, document.getElementById('root'));\n"],"sourceRoot":""}